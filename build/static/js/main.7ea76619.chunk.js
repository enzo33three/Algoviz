(this.webpackJsonpsorting_visualizer=this.webpackJsonpsorting_visualizer||[]).push([[0],{103:function(e){e.exports=JSON.parse('{"cpp":"// C++ program for insertion sort\\n#include <bits/stdc++.h>\\nusing namespace std;\\n\\n/* Function to sort an array using insertion sort*/\\nvoid insertionSort(int arr[], int n)\\n{\\n\\tint i, key, j;\\n\\tfor (i = 1; i < n; i++)\\n\\t{\\n\\t\\tkey = arr[i];\\n\\t\\tj = i - 1;\\n\\n\\t\\t/* Move elements of arr[0..i-1], that are\\n\\t\\tgreater than key, to one position ahead\\n\\t\\tof their current position */\\n\\t\\twhile (j >= 0 && arr[j] > key)\\n\\t\\t{\\n\\t\\t\\tarr[j + 1] = arr[j];\\n\\t\\t\\tj = j - 1;\\n\\t\\t}\\n\\t\\tarr[j + 1] = key;\\n\\t}\\n}\\n\\n// A utility function to print an array of size n\\nvoid printArray(int arr[], int n)\\n{\\n\\tint i;\\n\\tfor (i = 0; i < n; i++)\\n\\t\\tcout << arr[i] << \\" \\";\\n\\tcout << endl;\\n}\\n\\n/* Driver code */\\nint main()\\n{\\n\\tint arr[] = { 12, 11, 13, 5, 6 };\\n\\tint n = sizeof(arr) / sizeof(arr[0]);\\n\\n\\tinsertionSort(arr, n);\\n\\tprintArray(arr, n);\\n\\n\\treturn 0;\\n}\\n"}')},128:function(e,t,n){},129:function(e,t,n){},134:function(e,t,n){},136:function(e,t,n){},137:function(e,t,n){},138:function(e,t,n){},141:function(e,t,n){},142:function(e,t,n){},143:function(e,t,n){},144:function(e,t,n){"use strict";n.r(t);var r=n(1),i=n.n(r),a=n(30),s=n.n(a),o=(n(128),n(129),n(10)),c=n(21),l=n(16),d=n(62),u=function(e){for(var t=[],n=function(){t.push({value:Math.floor(70*Math.random()+10),id:r+1});var n=document.querySelector("#id".concat(r+1));n&&(n.style.transform="translate(".concat((600/e+5)*r,"px, ",0,"px)"),["green","yellow","red","blue"].forEach((function(e){n.classList.remove(e)})))},r=0;r<e;r++)n();return t},j=Object(d.b)({name:"counter",initialState:{arr:[],speed:500,size:15,isDisabled:!1,pivot:3,algo:4},reducers:{setSpeed:function(e,t){return Object(l.a)(Object(l.a)({},e),{},{speed:t.payload})},setSize:function(e,t){var n=u(t.payload);return e.size!==t.payload?Object(l.a)(Object(l.a)({},e),{},{arr:n,size:t.payload}):Object(l.a)({},e)},setArr:function(e,t){for(var n=[],r=function(){n.push({value:t.payload[i],id:i+1});var e=document.querySelector("#id".concat(i+1));e&&(e.style.transform="translate(".concat((600/t.payload.length+5)*i,"px, ",0,"px)"),["green","yellow","red","blue"].forEach((function(t){e.classList.remove(t)})))},i=0;i<t.payload.length;i++)r();return Object(l.a)(Object(l.a)({},e),{},{size:t.payload.length,arr:n})},setIsDisabled:function(e,t){return Object(l.a)(Object(l.a)({},e),{},{isDisabled:t.payload})},arrGenerator:function(e){var t=u(e.size);return Object(l.a)(Object(l.a)({},e),{},{arr:t})},setPivot:function(e,t){return Object(l.a)(Object(l.a)({},e),{},{pivot:t.payload})},setAlgo:function(e,t){return Object(l.a)(Object(l.a)({},e),{},{algo:t.payload})}}}),b=j.actions,p=b.setSpeed,h=b.setSize,f=b.setArr,m=b.setIsDisabled,g=b.arrGenerator,x=b.setPivot,O=b.setAlgo,y=j.reducer,v=n(216),w=n(210),S=(n(134),n(0)),k=function(){var e=Object(c.b)(),t=Object(c.c)((function(e){return e.sortingVisualizer})),n=t.pivot,r=t.isDisabled;return Object(S.jsxs)("div",{className:"quick-sort-pivot-body",children:[Object(S.jsx)("h2",{className:"quick-sort-pivot-heading",children:"Pivot Element"}),Object(S.jsxs)("div",{children:[Object(S.jsxs)("div",{className:"quick-sort-pivot-checkbox-container",children:[Object(S.jsx)(v.a,{disabled:r,className:"quick-sort-pivot-checkbox",control:Object(S.jsx)(w.a,{color:"success",checked:0===n,onClick:function(){e(x(0))}}),label:"First"}),Object(S.jsx)(v.a,{className:"quick-sort-pivot-checkbox",control:Object(S.jsx)(w.a,{disabled:r,checked:1===n,onClick:function(){e(x(1))}}),label:"Last"})]}),Object(S.jsxs)("div",{className:"quick-sort-pivot-checkbox-container",children:[Object(S.jsx)(v.a,{disabled:r,className:"quick-sort-pivot-checkbox",control:Object(S.jsx)(w.a,{checked:2===n,onClick:function(){e(x(2))}}),label:"Middle"}),Object(S.jsx)(v.a,{disabled:r,className:"quick-sort-pivot-checkbox",control:Object(S.jsx)(w.a,{checked:3===n,onClick:function(){e(x(3))}}),label:"Random"})]})]})]})},A=n(220),z=n(221),C=n(212),q=n(199);function T(e){var t=e.Component,n=e.isOpen,r=e.setIsOpen,i=e.data;return Object(S.jsx)("div",{children:Object(S.jsx)(C.a,{"aria-labelledby":"transition-modal-title","aria-describedby":"transition-modal-description",open:n,onClose:function(){return r(!1)},closeAfterTransition:!0,BackdropComponent:A.a,BackdropProps:{timeout:500},children:Object(S.jsx)(q.a,{in:n,children:Object(S.jsx)(z.a,{sx:i.style,children:Object(S.jsx)(t,{})})})})})}var I,N,L,P,M,E,F,_=n(103),D=n(66),B=n(67),V=n(104),H=n(110),R=n(105),J=n.n(R),Q=(n(136),n(204)),G=n(215),W=n(208),Y=n(203),U=i.a.forwardRef((function(e,t){return Object(S.jsx)(W.a,Object(l.a)({elevation:6,ref:t,variant:"filled"},e))})),K=!1;function X(e){return Object(S.jsx)(Y.a,Object(l.a)(Object(l.a)({},e),{},{direction:"down"}))}var Z=function(){var e=Object(r.useState)(!1),t=Object(o.a)(e,2);K=t[0],I=t[1];var n=Object(r.useState)(""),a=Object(o.a)(n,2);N=a[0],L=a[1];var s=Object(r.useState)(""),c=Object(o.a)(s,2);P=c[0],M=c[1];var l=Object(r.useState)(3e3),d=Object(o.a)(l,2);E=d[0],F=d[1],i.a.useEffect((function(){F((function(){I(!1)}),1e3)}),[]);var u=function(e,t){"clickaway"!==t&&I(!1)};return Object(S.jsx)(Q.a,{spacing:2,sx:{width:"100%"},children:Object(S.jsx)(G.a,{open:K,autoHideDuration:E,TransitionComponent:X,onClose:u,anchorOrigin:{vertical:"top",horizontal:"center"},children:Object(S.jsx)(U,{onClose:u,severity:P,sx:{width:"100%"},children:N})})})},$=n(222),ee=function(e){Object(V.a)(n,e);var t=Object(H.a)(n);function n(e){var r;return Object(D.a)(this,n),(r=t.call(this,e)).highlight=function(){r.ref&&r.ref.current&&J.a.highlightElement(r.ref.current)},r.ref=i.a.createRef(),r}return Object(B.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,t=e.code,n=e.plugins,r=e.language;return Object(S.jsxs)("pre",{className:n?n.join(" "):"",style:{position:"relative"},children:[Object(S.jsx)($.a,{variant:"outlined",style:{position:"absolute",top:"0",right:"0"},onClick:function(){navigator.clipboard.writeText(t),function(e,t,n){I(!1),L(e),M(t),void 0!==n&&F(n),I(!0)}("Code copied to Clipboard!!","success",3e3)},children:"Copy"}),Object(S.jsx)("code",{ref:this.ref,className:"language-".concat(r),children:t.trim()})]})}}]),n}(i.a.Component),te=function(){return Object(S.jsxs)("div",{style:{letterSpacing:".015rem",lineHeight:"1.5",fontSize:"1.3em"},children:[Object(S.jsx)("h1",{children:"Insertion Sort"}),"Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Algorithm"}),"\xa0",Object(S.jsx)("br",{}),"To sort an array of size n in ascending order:\xa0",Object(S.jsx)("br",{}),"1: Iterate from arr[1] to arr[n] over the array.\xa0",Object(S.jsx)("br",{}),"2: Compare the current element (key) to its predecessor.\xa0",Object(S.jsx)("br",{}),"3: If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position up to make space for the swapped element.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Another Example:\xa0"}),Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"12"}),", 11, 13, 5, 6",Object(S.jsx)("br",{}),"Let us loop for i = 1 (second element of the array) to 4 (last element of the array)",Object(S.jsx)("br",{}),"i = 1. Since 11 is smaller than 12, move 12 and insert 11 before 12\xa0",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"11, 12"}),", 13, 5, 6",Object(S.jsx)("br",{}),"i = 2. 13 will remain at its position as all elements in A[0..I-1] are smaller than 13\xa0",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"11, 12, 13"}),", 5, 6",Object(S.jsx)("br",{}),"i = 3. 5 will move to the beginning and all other elements from 11 to 13 will move one position ahead of their current position.\xa0",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"5, 11, 12, 13"}),", 6",Object(S.jsx)("br",{}),"i = 4. 6 will move to position after 5, and elements from 11 to 13 will move one position ahead of their current position.\xa0",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"5, 6, 11, 12, 13\xa0"}),Object(S.jsx)("br",{}),"\xa0",Object(S.jsx)(ee,{code:_.cpp,language:"js",plugins:["line-numbers"]})]})},ne=n(45),re=function(){return Object(S.jsxs)("div",{style:{letterSpacing:".015rem",lineHeight:"1.5",fontSize:"1.3em"},children:[Object(S.jsx)("h1",{children:"Quick Sort"}),Object(S.jsx)("p",{children:"Like Merge Sort QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways.\xa0"}),Object(S.jsx)("br",{}),Object(S.jsxs)("ol",{children:[Object(S.jsx)("li",{children:"Always pick first element as pivot."}),Object(S.jsx)("li",{children:"Always pick last element as pivot (implemented below)"}),Object(S.jsx)("li",{children:"Pick a random element as pivot."}),Object(S.jsx)("li",{children:"Pick median as pivot."})]}),Object(S.jsx)("br",{}),Object(S.jsx)("p",{children:"The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x. All this should be done in linear time."}),Object(S.jsx)("br",{}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Pseudo Code for recursive QuickSort function :"}),"\xa0"]}),Object(S.jsx)(ee,{code:ne.PseudoCode,language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Partition Algorithm"}),"\xa0",Object(S.jsx)("br",{}),"There can be many ways to do partition, following pseudo code adopts the method given in CLRS book. The logic is simple, we start from the leftmost element and keep track of index of smaller (or equal to) elements as i. While traversing, if we find a smaller element, we swap current element with arr[i]. Otherwise we ignore current element.\xa0"]}),Object(S.jsx)(ee,{code:ne.PartitionAlgo,language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Pseudo code for partition()"}),"\xa0\xa0"]}),Object(S.jsx)(ee,{code:ne.PseudoPartition,language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Illustration of partition() :"}),"\xa0"]}),Object(S.jsx)(ee,{code:ne.IllustrationPartition,language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Implementation:"}),"\xa0",Object(S.jsx)("br",{}),"Following are the implementations of QuickSort:\xa0\xa0"]}),Object(S.jsx)(ee,{code:ne.cpp,language:"js",plugins:["line-numbers"]})]})},ie=n(82),ae=function(){return Object(S.jsxs)("div",{style:{letterSpacing:".015rem",lineHeight:"1.5",fontSize:"1em"},children:[Object(S.jsx)("h1",{children:"Merge Sort"}),Object(S.jsxs)("p",{children:["Like QuickSort , Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves."," ",Object(S.jsx)("strong",{children:"The merge() function"})," is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one. See the following C implementation for details."]}),Object(S.jsx)(ee,{code:ie.Pseudo,language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("div",{style:{display:"flex"},children:[Object(S.jsxs)("p",{children:["The following diagram from"," ",Object(S.jsx)("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"http://en.wikipedia.org/wiki/File:Merge_sort_algorithm_diagram.svg",children:"wikipedia"})," ","shows the complete merge sort process for an example array"," ",10,". If we take a closer look at the diagram, we can see that the array is recursively divided into two halves till the size becomes 1. Once the size becomes 1, the merge processes come into action and start merging arrays back till the complete array is merged.",Object(S.jsx)("br",{}),"\xa0"]}),Object(S.jsx)("img",{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Merge_sort_algorithm_diagram.svg/1236px-Merge_sort_algorithm_diagram.svg.png",alt:"merge_sort_image",style:{width:"200%"}})]}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Implementation:"}),"\xa0",Object(S.jsx)("br",{}),"Following are the implementations of Merge Sort:\xa0\xa0"]}),Object(S.jsx)(ee,{code:ie.cpp,language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Time Complexity:"})," Sorting arrays on different machines. Merge Sort is a recursive algorithm and time complexity can be expressed as following recurrence relation.\xa0",Object(S.jsx)("br",{}),"T(n) = 2T(n/2) + \u03b8(n)"]}),Object(S.jsxs)("p",{children:["The above recurrence can be solved either using the Recurrence Tree method or the Master method. It falls in case II of Master Method and the solution of the recurrence is \u03b8(nLogn).\xa0Time complexity of Merge Sort is \xa0\u03b8(nLogn) in all 3 cases (worst, average and best) as merge sort always divides the array into two halves and takes linear time to merge two halves.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Auxiliary Space:"})," O(n)",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Algorithmic Paradigm: "}),"Divide and Conquer",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Sorting In Place:"})," No in a typical implementation",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Stable:"})," Yes"]})]})},se=n(83),oe=function(){return Object(S.jsxs)("div",{style:{letterSpacing:".015rem",lineHeight:"1.5",fontSize:"1.3em"},children:[Object(S.jsx)("h1",{children:"Selection Sort"}),Object(S.jsxs)("p",{children:["The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array.",Object(S.jsx)("br",{}),"1) The subarray which is already sorted.\xa0",Object(S.jsx)("br",{}),"2) Remaining subarray which is unsorted.",Object(S.jsx)("br",{}),"In every iteration of selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray.\xa0",Object(S.jsx)("br",{}),"Following example explains the above steps:\xa0",Object(S.jsx)("br",{}),"\xa0"]}),Object(S.jsx)(ee,{code:se.PseudoCode,language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Flowchart of the Selection Sort:"}),"\xa0",Object(S.jsx)("br",{}),"\xa0"]}),Object(S.jsx)("p",{children:Object(S.jsx)("img",{src:"https://media.geeksforgeeks.org/wp-content/cdn-uploads/20220203094305/Selection-Sort-Flowhchart.png",alt:"Selection-Sort-Flowhchart",width:"100%"})}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Implementation:"}),"\xa0",Object(S.jsx)("br",{}),"Following are the implementations of Selection Sort:\xa0\xa0"]}),Object(S.jsx)(ee,{code:se.cpp,language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Time Complexity:"})," O(n",Object(S.jsx)("sup",{children:"2"}),") as there are two nested loops.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Auxiliary Space:"})," O(1)\xa0",Object(S.jsx)("br",{}),"The good thing about selection sort is it never makes more than O(n) swaps and can be useful when memory write is a costly operation.\xa0",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Exercise :\xa0"}),Object(S.jsx)("br",{}),Object(S.jsx)("a",{href:"https://www.geeksforgeeks.org/c-program-to-sort-an-array-of-strings-using-selection-sort-2/",children:"Sort an array of strings using Selection Sort"}),Object(S.jsx)("br",{}),Object(S.jsxs)("a",{href:"https://www.geeksforgeeks.org/stability-in-sorting-algorithms/",children:["Stability :"," "]}),"The default implementation is not stable. However it can be made stable. Please see"," ",Object(S.jsx)("a",{href:"https://www.geeksforgeeks.org/stable-selection-sort/",children:"stable selection sort"})," ","for details.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"In Place : "}),"Yes, it does not require extra space.",Object(S.jsx)("br",{}),"\xa0\xa0",Object(S.jsx)("br",{}),"\xa0"]})]})},ce=n(84),le=function(){return Object(S.jsxs)("div",{style:{letterSpacing:".015rem",lineHeight:"1.5",fontSize:"1.3em"},children:[Object(S.jsx)("h1",{children:"Bubble Sort"}),Object(S.jsxs)("p",{children:["Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Example:"}),"\xa0",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"First Pass:"}),"\xa0",Object(S.jsx)("br",{}),"( ",Object(S.jsx)("strong",{children:"5"})," ",Object(S.jsx)("strong",{children:"1"})," 4 2 8 ) \u2013> ("," ",Object(S.jsx)("strong",{children:"1"})," ",Object(S.jsx)("strong",{children:"5"})," 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.\xa0",Object(S.jsx)("br",{}),"( 1 ",Object(S.jsx)("strong",{children:"5"})," ",Object(S.jsx)("strong",{children:"4"})," 2 8 ) \u2013>\xa0 ( 1"," ",Object(S.jsx)("strong",{children:"4"})," ",Object(S.jsx)("strong",{children:"5"})," 2 8 ), Swap since 5 > 4\xa0",Object(S.jsx)("br",{}),"( 1 4 ",Object(S.jsx)("strong",{children:"5"})," ",Object(S.jsx)("strong",{children:"2"})," 8 ) \u2013>\xa0 ( 1 4"," ",Object(S.jsx)("strong",{children:"2"})," ",Object(S.jsx)("strong",{children:"5"})," 8 ), Swap since 5 > 2\xa0",Object(S.jsx)("br",{}),"( 1 4 2 ",Object(S.jsx)("strong",{children:"5"})," ",Object(S.jsx)("strong",{children:"8"})," ) \u2013> ( 1 4 2"," ",Object(S.jsx)("strong",{children:"5"})," ",Object(S.jsx)("strong",{children:"8"})," ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Second Pass:"}),"\xa0",Object(S.jsx)("br",{}),"( ",Object(S.jsx)("strong",{children:"1 4"})," 2 5 8 ) \u2013> ( ",Object(S.jsx)("strong",{children:"1"})," ",Object(S.jsx)("strong",{children:"4"})," 2 5 8 )\xa0",Object(S.jsx)("br",{}),"( 1 ",Object(S.jsx)("strong",{children:"4"})," ",Object(S.jsx)("strong",{children:"2"})," 5 8 ) \u2013> ( 1"," ",Object(S.jsx)("strong",{children:"2"})," ",Object(S.jsx)("strong",{children:"4"})," 5 8 ), Swap since 4 > 2\xa0",Object(S.jsx)("br",{}),"( 1 2 ",Object(S.jsx)("strong",{children:"4"})," ",Object(S.jsx)("strong",{children:"5"})," 8 ) \u2013> ( 1 2"," ",Object(S.jsx)("strong",{children:"4"})," ",Object(S.jsx)("strong",{children:"5"})," 8 )\xa0",Object(S.jsx)("br",{}),"( 1 2 4 ",Object(S.jsx)("strong",{children:"5"})," ",Object(S.jsx)("strong",{children:"8"})," ) \u2013>\xa0 ( 1 2 4 ",Object(S.jsx)("strong",{children:"5"})," ",Object(S.jsx)("strong",{children:"8"})," )\xa0",Object(S.jsx)("br",{}),"Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one ",Object(S.jsx)("strong",{children:"whole"})," pass without ",Object(S.jsx)("strong",{children:"any"})," swap to know it is sorted.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Third Pass:"}),"\xa0",Object(S.jsx)("br",{}),"( ",Object(S.jsx)("strong",{children:"1"})," ",Object(S.jsx)("strong",{children:"2"})," 4 5 8 ) \u2013> ("," ",Object(S.jsx)("strong",{children:"1"})," ",Object(S.jsx)("strong",{children:"2"})," 4 5 8 )\xa0",Object(S.jsx)("br",{}),"( 1 ",Object(S.jsx)("strong",{children:"2"})," ",Object(S.jsx)("strong",{children:"4"})," 5 8 ) \u2013> ( 1"," ",Object(S.jsx)("strong",{children:"2"})," ",Object(S.jsx)("strong",{children:"4"})," 5 8 )\xa0",Object(S.jsx)("br",{}),"( 1 2 ",Object(S.jsx)("strong",{children:"4"})," ",Object(S.jsx)("strong",{children:"5"})," 8 ) \u2013> ( 1 2"," ",Object(S.jsx)("strong",{children:"4"})," ",Object(S.jsx)("strong",{children:"5"})," 8 )\xa0",Object(S.jsx)("br",{}),"( 1 2 4 ",Object(S.jsx)("strong",{children:"5"})," ",Object(S.jsx)("strong",{children:"8"})," ) \u2013> ( 1 2 4"," ",Object(S.jsx)("strong",{children:"5"})," ",Object(S.jsx)("strong",{children:"8"})," )\xa0",Object(S.jsx)("br",{}),"\xa0"]}),Object(S.jsxs)("p",{children:["Following is the implementations of Bubble Sort.\xa0",Object(S.jsx)("br",{}),"\xa0"]}),Object(S.jsx)(ee,{code:ce.cpp,language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("p",{children:["<!\u2014-",Object(S.jsx)("strong",{children:"Illustration :\xa0"}),Object(S.jsx)("br",{}),"\xa0"]}),Object(S.jsx)("p",{children:Object(S.jsx)("img",{src:"https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/02/bubble-sort1.png",alt:"bubble-sort"})}),Object(S.jsxs)("p",{children:["\u2014>",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Optimized Implementation:"}),"\xa0",Object(S.jsx)("br",{}),"The above function always runs O(n^2) time even if the array is sorted. It can be optimized by stopping the algorithm if inner loop didn\u2019t cause any swap.\xa0",Object(S.jsx)("br",{}),"\xa0"]}),Object(S.jsx)(ee,{code:ce["cpp-optimized"],language:"js",plugins:["line-numbers"]}),Object(S.jsxs)("p",{children:[Object(S.jsx)("strong",{children:"Worst and Average Case Time Complexity: "}),"O(n*n). Worst case occurs when array is reverse sorted.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Best Case Time Complexity:"})," O(n). Best case occurs when array is already sorted.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Auxiliary Space:"})," O(1)",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Boundary Cases:"})," Bubble sort takes minimum time (Order of n) when elements are already sorted.",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Sorting In Place: "}),"Yes",Object(S.jsx)("br",{}),Object(S.jsx)("strong",{children:"Stable:"})," Yes",Object(S.jsx)("br",{}),"Due to its simplicity, bubble sort is often used to introduce the concept of a sorting algorithm.\xa0",Object(S.jsx)("br",{}),"In computer graphics it is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines (Source:"," ",Object(S.jsx)("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"http://en.wikipedia.org/wiki/Bubble_sort#In_practice",children:"Wikipedia"}),")",Object(S.jsx)("br",{}),"\xa0\xa0",Object(S.jsx)("br",{}),"\xa0"]})]})},de=function(e){switch(e.algo){case 0:return Object(S.jsx)(te,{});case 1:return Object(S.jsx)(le,{});case 2:return Object(S.jsx)(oe,{});case 3:return Object(S.jsx)(ae,{});case 4:return Object(S.jsx)(re,{});default:return Object(S.jsx)("h1",{children:"Error..."})}},ue=function(){var e=Object(c.c)((function(e){return e.sortingVisualizer})).algo;return Object(S.jsxs)("div",{children:[Object(S.jsxs)("p",{style:{position:"absolute",top:"0",right:"0",padding:"7px"},children:[" ","\xa9"," ",Object(S.jsx)("a",{href:"https://www.geeksforgeeks.org/",rel:"noreferrer",target:"_blank",children:"GeeksForGeeks"})]}),Object(S.jsx)(de,{algo:e})]})},je=n(106),be=n.n(je),pe=(n(137),{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",width:"60vw",height:"fit-content",maxHeight:"80vh",overflow:"auto",bgcolor:"#222831",border:"1px solid gray",boxShadow:"white 0 0 5px 0.5px",p:4,borderRadius:"5px"});var he=function(){var e=Object(c.b)(),t=i.a.useState(!1),n=Object(o.a)(t,2),a=n[0],s=n[1],l=Object(c.c)((function(e){return e.sortingVisualizer})),d=l.size,u=l.arr,j=l.speed,b=l.algo;return Object(r.useEffect)((function(){e(g())}),[]),Object(S.jsxs)(S.Fragment,{children:[Object(S.jsx)(T,{isOpen:a,setIsOpen:s,data:{algo:b,style:pe},Component:ue}),Object(S.jsxs)("div",{className:"body-main-container",children:[Object(S.jsx)("div",{className:"body-controller-container",children:4===b&&Object(S.jsx)(k,{})}),Object(S.jsx)("div",{className:"about-algo-button",children:Object(S.jsx)($.a,{variant:"outlined",onClick:function(){s(!a)},sx:{padding:"0",width:"fit-content"},children:Object(S.jsx)(be.a,{fontSize:"large",color:"info"})})}),Object(S.jsx)("div",{className:"bars-container",children:Object(S.jsx)("div",{className:"container red blue",children:u.map((function(e,t){return Object(S.jsx)("div",{id:"id".concat(t+1),className:"bar",style:{width:500/d+"px",height:4*e.value,transform:"translate(".concat((600/d+5)*t,"px, ",0,"px)"),transition:"transform ".concat(j/1500,"s ease")},children:Object(S.jsx)("span",{style:{fontSize:"min(".concat(300/d,"px, 2rem)")},className:"barcount",children:e.value})})}))})})]})]})},fe=n(11),me=n(17),ge=n(15),xe=n(223),Oe=n(107),ye=n.n(Oe),ve=n(206),we=n(205),Se=n(219),ke=n(207),Ae=n(213),ze=n(217),Ce=Object(d.a)({reducer:{sortingVisualizer:y}}),qe=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t){var n,r;return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=!1,r=function(){n=!0},e.next=4,t(r);case 4:!n&&setTimeout((function(){qe(t)}),Ce.getState().sortingVisualizer.speed);case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Te=qe,Ie=!0,Ne=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,new Promise((function(e,r){document.querySelector(".stop-btn").addEventListener("click",(function(){Ie=!1}));var i=1,a=0;document.querySelector("#id2").classList.add("green"),Te((function(r){if(Ie||(r(),e(!0),n(!1),Ie=!0),a>=0&&t[a].value>t[a+1].value){var s=document.querySelector("#id".concat(t[a].id)),o=document.querySelector("#id".concat(t[a+1].id)),c=[o.style.transform,s.style.transform];s.style.transform=c[0],o.style.transform=c[1];var l=[t[a+1],t[a]];t[a]=l[0],t[a+1]=l[1],a--}else i>=t.length-1?(e(!0),r(),n(!1)):(document.querySelectorAll(".green").forEach((function(e){e.classList.remove("green")})),i++,a=i-1,document.querySelector("#id".concat(i+1)).classList.add("green"))}))}));case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Le=Ne,Pe=!0,Me=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,new Promise(function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(r){var i,a,s;return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:document.querySelector(".stop-btn").addEventListener("click",(function(){Pe=!1})),i=0,a=0,s=!0,Te((function(e){if(!Pe)return n(!1),Pe=!0,e(),void r(!0);if(s){document.querySelectorAll(".green").forEach((function(e){e.classList.remove("green")}));var o=document.querySelector("#id".concat(t[a].id));document.querySelector("#id".concat(t[a+1].id)).classList.add("green"),o.classList.add("green"),s=!1}else if(a<t.length-i-1){if(t[a].value>t[a+1].value){var c=document.querySelector("#id".concat(t[a].id)),l=document.querySelector("#id".concat(t[a+1].id)),d=[l.style.transform,c.style.transform];c.style.transform=d[0],l.style.transform=d[1];var u=[t[a+1],t[a]];t[a]=u[0],t[a+1]=u[1]}++a!==t.length-i-1&&(s=!0)}else{if(i>=t.length)return r(!0),n(!1),void e();document.querySelectorAll(".green").forEach((function(e){e.classList.remove("green")})),document.querySelector("#id".concat(t[t.length-i-1].id)).classList.add("yellow"),i++,a=0,s=!0}}));case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}());case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Ee=Me,Fe=!0,_e=function(e){document.querySelectorAll(".".concat(e)).forEach((function(t){t.classList.remove(e)}))},De=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n,r){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,new Promise((function(e){document.querySelector(".stop-btn").addEventListener("click",(function(){Fe=!1}));var i=n;_e("red"),document.getElementById("id".concat(t[i].id)).classList.add("red");var a=n+1;Te((function(s){if(Fe)if(a<r)_e("green"),document.getElementById("id".concat(t[a].id)).classList.add("green"),t[a].value<t[i].value&&(i=a,_e("red"),document.getElementById("id".concat(t[i].id)).classList.add("red")),a++;else{s(),_e("green");var o=document.querySelector("#id".concat(t[n].id)),c=document.querySelector("#id".concat(t[i].id)),l=[c.style.transform,o.style.transform];o.style.transform=l[0],c.style.transform=l[1];var d=[t[n],t[i]];t[i]=d[0],t[n]=d[1],document.querySelector("#id".concat(t[n].id)).classList.remove("red"),document.querySelector("#id".concat(t[n].id)).classList.add("yellow"),e(!0)}else e(!0),s()}))}));case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),Be=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n){var r,i;return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n,i){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n<i)){e.next=9;break}if(e.t0=Fe,!e.t0){e.next=5;break}return e.next=5,De(t,n,i);case 5:if(e.t1=Fe,!e.t1){e.next=9;break}return e.next=9,r(t,n+1,i);case 9:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),i=t.length,e.next=4,r(t,0,i);case 4:Fe=!0,n(!1);case 6:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Ve=Be,He=!0,Re=function(e){e.forEach((function(e){document.querySelectorAll(".".concat(e)).forEach((function(t){t.classList.remove(e)}))}))},Je=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,new Promise((function(e){setTimeout((function(){e(!0)}),t)}));case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();function Qe(e,t,n,r){return Ge.apply(this,arguments)}function Ge(){return Ge=Object(ge.a)(Object(fe.a)().mark((function e(t,n,r,i){var a,s,o,c,l,d,u,j,b,p,h,f,m,g;return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(document.querySelectorAll(".green").forEach((function(e){e.classList.remove("green")})),a=r-n+1,s=i-r,o=new Array(a),c=new Array(s),l=[],d=0;d<a;d++)o[d]=t[n+d];for(u=0;u<s;u++)c[u]=t[r+1+u];for(j=0,b=0,p=n;j<a&&b<s;)o[j].value<=c[b].value?(l.push(o[j]),j++):(l.push(c[b]),b++);for(;j<a;)l.push(o[j]),j++;for(;b<s;)l.push(c[b]),b++;for(p=n,h=[],f=n;f<=i;f++)(m=document.querySelector("#id".concat(t[f].id))).classList.add("green"),g=/\(([^)]+)\)/.exec(m.style.transform),h.push(g[0].slice(1,g[0].length-1).split(",")[0]);return e.next=17,Je(Ce.getState().sortingVisualizer.speed);case 17:return e.next=19,new Promise(function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(r){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Te((function(e){if(He||(r(!0),e()),p<=i){document.querySelector("#id".concat(l[p-n].id)).style.transform="translate(".concat(h[p-n],",-50vh)"),t[p]=l[p-n],p++}else{for(var a=n;a<=i;a++){var s=document.querySelector("#id".concat(t[a].id)),o=/\(([^)]+)\)/.exec(s.style.transform);s.style.transform="translate(".concat(o[0].slice(1,o[0].length-1).split(",")[0],",0px)")}r(!0),e()}}));case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}());case 19:case"end":return e.stop()}}),e)}))),Ge.apply(this,arguments)}var We=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise(function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(r){var i,a,s,o;return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return document.querySelector(".stop-btn").addEventListener("click",(function(){He=!1})),i=[],a=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n){var r;return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(t>=n)){e.next=2;break}return e.abrupt("return");case 2:return r=t+parseInt((n-t)/2),e.next=5,a(t,r);case 5:return e.next=7,a(r+1,n);case 7:i.push([t,r,n]);case 8:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),e.next=5,a(0,t.length-1);case 5:s=0;case 6:if(!(s<i.length)){e.next=19;break}return o=i[s],e.next=10,Qe(t,o[0],o[1],o[2]);case 10:if(He){e.next=16;break}return r(!0),Re(["green","red","purple","blue"]),n(!1),He=!0,e.abrupt("break",19);case 16:s++,e.next=6;break;case 19:Re(["green","red","purple","blue"]),n(!1),r(!0);case 22:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()));case 1:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Ye=We,Ue=!0,Ke=function(e){return document.querySelector("#id".concat(e))},Xe=function(e){e.forEach((function(e){var t;null===(t=document.querySelectorAll(".".concat(e)))||void 0===t||t.forEach((function(t){t.classList.remove(e)}))}))},Ze=function(e,t,n,r){for(var i=e;i<=t;i++)Ke(n[i].id).classList.add(r)},$e=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,new Promise((function(e,n){setTimeout((function(){e(!0)}),t)}));case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),et=function(e,t){var n=Ke(e),r=Ke(t),i=[r.style.transform,n.style.transform];n.style.transform=i[0],r.style.transform=i[1]},tt=function(e,t,n){return 0===n?e:1===n?t:2===n?Math.floor((e+t)/2):Math.floor(Math.random()*(t-e+1)+e)},nt=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n,r,i){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,new Promise(function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(a,s){var o,c,l,d,u,j;return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return c=tt(n,r,i),null===(o=Ke(t[c].id))||void 0===o||o.classList.add("red"),e.next=4,$e(Ce.getState().sortingVisualizer.speed);case 4:return et(t[c].id,t[r].id),l=[t[r],t[c]],t[c]=l[0],t[r]=l[1],d=t[r].value,e.next=11,$e(Ce.getState().sortingVisualizer.speed);case 11:u=n-1,j=n,Te((function(e){var n,i,s;if(Ue||(e(),a(0)),j>=r)if(j===r){et(t[u+1].id,t[r].id);var o=[t[r],t[u+1]];t[u+1]=o[0],t[r]=o[1]}else Ke(t[u+1].id).classList.add("yellow"),a(u+1),e();else if((null===(n=t[j])||void 0===n?void 0:n.value)<=d){u++,et(t[u].id,t[j].id),Ke(t[j].id).classList.add("green");var c=[t[j],t[u]];t[u]=c[0],t[j]=c[1]}j<r&&(null===(i=Ke(null===(s=t[j])||void 0===s?void 0:s.id))||void 0===i||i.classList.add("purple"));j++}));case 13:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t,n,r,i){return e.apply(this,arguments)}}(),rt=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n,r,i){var a,s,o,c,l;return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n<r&&Ue)){e.next=22;break}return e.next=3,$e(Ce.getState().sortingVisualizer.speed);case 3:if(Ze(n,r,t,"blue"),e.t0=Ue,!e.t0){e.next=9;break}return e.next=8,nt(t,n,r,i);case 8:e.t0=e.sent;case 9:if(a=e.t0,Xe(["green","red","purple","blue"]),e.t1=Ue,!e.t1){e.next=15;break}return e.next=15,rt(t,n,a-1,i);case 15:if(Xe(["green","red","purple","blue"]),e.t2=Ue,!e.t2){e.next=20;break}return e.next=20,rt(t,a+1,r,i);case 20:e.next=23;break;case 22:Ue&&(null===(s=Ke(null===(o=t[n])||void 0===o?void 0:o.id))||void 0===s||s.classList.add("yellow"),null===(c=Ke(null===(l=t[r])||void 0===l?void 0:l.id))||void 0===c||c.classList.add("yellow"));case 23:case"end":return e.stop()}}),e)})));return function(t,n,r,i){return e.apply(this,arguments)}}(),it=function(){var e=Object(ge.a)(Object(fe.a)().mark((function e(t,n,r){return Object(fe.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return document.querySelector(".stop-btn").addEventListener("click",(function(){Ue=!1})),e.next=3,rt(t,0,t.length-1,r);case 3:if(e.t0=Ue,!e.t0){e.next=7;break}return e.next=7,$e(2*Ce.getState().sortingVisualizer.speed);case 7:Ue=!0,n(!1);case 9:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),at=it,st=(n(138),["Insertion Sort","Bubble Sort","Selection Sort","Merge Sort","Quick Sort"]);function ot(){var e=Object(c.b)(),t=Object(c.c)((function(e){return e.sortingVisualizer})),n=t.arr,i=t.isDisabled,a=t.pivot,s=t.algo,d=r.useState(!1),u=Object(o.a)(d,2),j=u[0],b=u[1],p=r.useRef(null),h=function(t){e(m(t))},x=function(){var t=Object(ge.a)(Object(fe.a)().mark((function t(){var r;return Object(fe.a)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(h(!0),t.t0=0===s,!t.t0){t.next=5;break}return t.next=5,Le(Object(me.a)(n),h);case 5:if(t.t1=1===s,!t.t1){t.next=9;break}return t.next=9,Ee(Object(me.a)(n),h);case 9:if(t.t2=2===s,!t.t2){t.next=13;break}return t.next=13,Ve(Object(me.a)(n),h);case 13:if(t.t3=3===s,!t.t3){t.next=17;break}return t.next=17,Ye(Object(me.a)(n),h);case 17:if(t.t4=4===s,!t.t4){t.next=21;break}return t.next=21,at(Object(me.a)(n),h,a);case 21:r=[],n.forEach((function(e){r.push(e.value)})),r.sort(),e(f(r));case 25:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),y=function(e){p.current&&p.current.contains(e.target)||b(!1)};return Object(S.jsxs)(S.Fragment,{children:[Object(S.jsxs)("div",{style:{textAlign:"center"},children:[Object(S.jsxs)(xe.a,{color:"success",variant:"contained",ref:p,"aria-label":"split button",children:[Object(S.jsx)($.a,{style:{color:i?"white":"black",border:i&&"1px solid white"},onClick:x,disabled:i,children:st[s]}),Object(S.jsx)($.a,{color:"success",size:"small","aria-controls":j?"split-button-menu":void 0,"aria-expanded":j?"true":void 0,"aria-label":"select merge strategy","aria-haspopup":"menu",style:{color:"white",border:i&&"1px solid white"},onClick:function(){b((function(e){return!e}))},disabled:i,children:Object(S.jsx)(ye.a,{})})]}),Object(S.jsx)(ke.a,{style:{color:"black",zIndex:1},open:j,anchorEl:p.current,role:void 0,transition:!0,disablePortal:!0,children:function(t){var n=t.TransitionProps,r=t.placement;return Object(S.jsx)(we.a,Object(l.a)(Object(l.a)({},n),{},{style:{transformOrigin:"bottom"===r?"center top":"center bottom"},children:Object(S.jsx)(Se.a,{children:Object(S.jsx)(ve.a,{onClickAway:y,children:Object(S.jsx)(ze.a,{style:{color:"black"},id:"split-button-menu",children:st.map((function(t,n){return Object(S.jsx)(Ae.a,{style:{backgroundColor:n===s?"#2e7d32":""},selected:n===s,onClick:function(t){return function(t,n){e(O(n)),b(!1)}(0,n)},children:t},t)}))})})})}))}})]}),Object(S.jsxs)("div",{className:"generate-new-array-btn-container",children:[Object(S.jsx)($.a,{onClick:function(){e(g())},disabled:i,style:{color:"white",border:i&&"1px solid white"},color:"primary",variant:"contained",children:"Generate New Array"}),Object(S.jsx)($.a,{style:{color:"white",marginLeft:"10px"},onClick:function(){console.log("Stop Button Clicked....")},color:"primary",variant:"contained",className:"stop-btn",children:"Stop"})]})]})}var ct=n(211),lt=n(86),dt=n.n(lt),ut=n(85),jt=n.n(ut),bt=n(218);function pt(){var e=Object(c.c)((function(e){return e.sortingVisualizer})),t=e.isDisabled,n=e.size,r=e.speed,i=Object(c.b)();return Object(S.jsxs)(z.a,{width:300,children:[Object(S.jsx)(bt.a,{style:{color:"white"},children:"Speed"}),Object(S.jsxs)(Q.a,{spacing:2,direction:"row",sx:{mb:1},alignItems:"center",children:[Object(S.jsx)(jt.a,{}),Object(S.jsx)(ct.a,{size:"large",defaultValue:500,max:1500,min:100,"aria-label":"large",valueLabelDisplay:"auto",value:1500-r,onChange:function(e){i(p(1501-e.target.value))}}),Object(S.jsx)(dt.a,{})]}),Object(S.jsx)(bt.a,{style:{color:"white"},children:"Size"}),Object(S.jsxs)(Q.a,{spacing:2,direction:"row",sx:{mb:1},alignItems:"center",children:[Object(S.jsx)(jt.a,{}),Object(S.jsx)(ct.a,{size:"large",defaultValue:30,max:50,min:5,"aria-label":"large",valueLabelDisplay:"auto",disabled:t,value:n,onChange:function(e){i(h(e.target.value)),document.querySelector(".container").style.width=100/e.target.value+5*e.target.value+500+"px"}}),Object(S.jsx)(dt.a,{})]})]})}var ht=n(108),ft=n.n(ht),mt=(n(141),function(){var e=Object(c.b)(),t=Object(c.c)((function(e){return e.sortingVisualizer})),n=t.arr,i=t.isDisabled,a=Object(r.useState)(""),s=Object(o.a)(a,2),l=s[0],d=s[1];Object(r.useEffect)((function(){var e="";n.forEach((function(t){e+="".concat(t.value,",")})),d(e)}),[n]);return Object(S.jsxs)("div",{className:"array-input-container",children:[Object(S.jsx)("label",{className:"array-input-label",htmlFor:"array-input",children:"Custom Array"}),Object(S.jsx)("textarea",{rows:"2",value:l,placeholder:"Custom Array",id:"array-input",className:"array-input",onChange:function(e){d(e.target.value)}}),Object(S.jsx)($.a,{disabled:i,style:{color:"white",border:i&&"1px solid white"},onClick:function(){var t=l.slice(0,l.length).split(",");(t=t.filter((function(e){return Number.isInteger(parseInt(e))}))).map((function(e,n){return t[n]=parseInt(e)>79?79:parseInt(e)})),e(f(t))},className:"input-array-btn",variant:"contained",color:"primary",children:"Generate"}),Object(S.jsx)($.a,{disabled:i,style:{color:"white",border:i&&"1px solid white"},onClick:function(){var t=Object(me.a)(n);t.map((function(e,n){return t[n]=e.value}));for(var r=t.length-1;r>0;r--){var i=Math.floor(Math.random()*(r+1)),a=[t[i],t[r]];t[r]=a[0],t[i]=a[1]}e(f(t))},className:"shuffle-array-btn",variant:"contained",color:"info",children:"Shuffle"})]})}),gt=(n(142),function(){return Object(S.jsx)("div",{className:"sidebar-container",children:Object(S.jsxs)("div",{className:"controller-container",children:[Object(S.jsx)("div",{className:"sort-btns-container",children:Object(S.jsx)(ot,{})}),Object(S.jsx)("div",{children:Object(S.jsx)(mt,{})}),Object(S.jsx)("div",{className:"sliders-container",children:Object(S.jsx)(pt,{})}),Object(S.jsxs)("div",{className:"github-logo-container",children:[Object(S.jsx)(ft.a,{fontSize:"large"}),Object(S.jsx)("a",{href:"https://github.com/enzo33three",target:"_blank",rel:"noreferrer",children:"view repo"})]}),Object(S.jsx)("img",{className:"sidebar-visitor-badge",src:"https://visitor-badge.glitch.me/badge?page_id=enzo33three.sorting_visualizer",alt:"visitor-badge"})]})})}),xt=(n(143),function(){return Object(S.jsx)("div",{className:"header-container",children:Object(S.jsx)("div",{className:"header-heading-container",children:Object(S.jsx)("h1",{className:"header-heading",children:"Sorting Visualizer"})})})}),Ot={position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",width:"90vw",height:"fit-content",overflow:"auto",bgcolor:"#222831",border:"1px solid gray",boxShadow:"white 0 0 5px 0.5px",p:4,borderRadius:"5px"};var yt=function(){var e=window,t=e.innerWidth,n=e.innerHeight;return Object(S.jsxs)("div",{className:"main-container",children:[Object(S.jsx)(Z,{}),Object(S.jsx)("div",{children:Object(S.jsx)(xt,{})}),Object(S.jsxs)("div",{className:"sidebar-body-container",children:[Object(S.jsx)(gt,{}),Object(S.jsx)(he,{})]}),(t<1300||n<620)&&Object(S.jsx)(T,{Component:function(){return Object(S.jsxs)("div",{style:{textAlign:"center"},children:[Object(S.jsx)("h3",{children:"This App is only for big screens."}),Object(S.jsx)("br",{}),Object(S.jsx)("h4",{children:"Please open in bigger screen"})]})},isOpen:!0,setIsOpen:function(e){console.log(e)},data:{style:Ot}})]})};s.a.render(Object(S.jsx)(c.a,{store:Ce,children:Object(S.jsx)(i.a.StrictMode,{children:Object(S.jsx)(yt,{})})}),document.getElementById("root"))},45:function(e){e.exports=JSON.parse('{"cpp":"/* C++ implementation of QuickSort */\\n#include <bits/stdc++.h>\\nusing namespace std;\\n\\n// A utility function to swap two elements\\nvoid swap(int* a, int* b)\\n{\\n\\tint t = *a;\\n\\t*a = *b;\\n\\t*b = t;\\n}\\n\\n/* This function takes last element as pivot, places\\nthe pivot element at its correct position in sorted\\narray, and places all smaller (smaller than pivot)\\nto left of pivot and all greater elements to right\\nof pivot */\\nint partition (int arr[], int low, int high)\\n{\\n\\tint pivot = arr[high]; // pivot\\n\\tint i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far\\n\\n\\tfor (int j = low; j <= high - 1; j++)\\n\\t{\\n\\t\\t// If current element is smaller than the pivot\\n\\t\\tif (arr[j] < pivot)\\n\\t\\t{\\n\\t\\t\\ti++; // increment index of smaller element\\n\\t\\t\\tswap(&arr[i], &arr[j]);\\n\\t\\t}\\n\\t}\\n\\tswap(&arr[i + 1], &arr[high]);\\n\\treturn (i + 1);\\n}\\n\\n/* The main function that implements QuickSort\\narr[] --\x3e Array to be sorted,\\nlow --\x3e Starting index,\\nhigh --\x3e Ending index */\\nvoid quickSort(int arr[], int low, int high)\\n{\\n\\tif (low < high)\\n\\t{\\n\\t\\t/* pi is partitioning index, arr[p] is now\\n\\t\\tat right place */\\n\\t\\tint pi = partition(arr, low, high);\\n\\n\\t\\t// Separately sort elements before\\n\\t\\t// partition and after partition\\n\\t\\tquickSort(arr, low, pi - 1);\\n\\t\\tquickSort(arr, pi + 1, high);\\n\\t}\\n}\\n\\n/* Function to print an array */\\nvoid printArray(int arr[], int size)\\n{\\n\\tint i;\\n\\tfor (i = 0; i < size; i++)\\n\\t\\tcout << arr[i] << \\" \\";\\n\\tcout << endl;\\n}\\n\\n// Driver Code\\nint main()\\n{\\n\\tint arr[] = {10, 7, 8, 9, 1, 5};\\n\\tint n = sizeof(arr) / sizeof(arr[0]);\\n\\tquickSort(arr, 0, n - 1);\\n\\tcout << \\"Sorted array: \\\\n\\";\\n\\tprintArray(arr, n);\\n\\treturn 0;\\n}\\n\\n","PseudoCode":"/* low --\x3e Starting index, high --\x3e Ending index */\\nquickSort(arr[], low, high)\\n{\\n if (low < high)\\n {\\n /* pi is partitioning index, arr[pi] is now\\n at right place */\\n pi = partition(arr, low, high);\\n\\n quickSort(arr, low, pi - 1); // Before pi\\n quickSort(arr, pi + 1, high); // After pi\\n }\\n}","PartitionAlgo":"/* low --\x3e Starting index, high --\x3e Ending index */\\nquickSort(arr[], low, high)\\n{\\n if (low < high)\\n {\\n /* pi is partitioning index, arr[pi] is now\\n at right place */\\n pi = partition(arr, low, high);\\n\\n quickSort(arr, low, pi - 1); // Before pi\\n quickSort(arr, pi + 1, high); // After pi\\n }\\n}","PseudoPartition":"/* This function takes last element as pivot, places\\n the pivot element at its correct position in sorted\\n array, and places all smaller (smaller than pivot)\\n to left of pivot and all greater elements to right\\n of pivot */\\npartition (arr[], low, high)\\n{\\n // pivot (Element to be placed at right position)\\n pivot = arr[high]; \\n \\n i = (low - 1) // Index of smaller element and indicates the \\n // right position of pivot found so far\\n\\n for (j = low; j <= high- 1; j++)\\n {\\n // If current element is smaller than the pivot\\n if (arr[j] < pivot)\\n {\\n i++; // increment index of smaller element\\n swap arr[i] and arr[j]\\n }\\n }\\n swap arr[i + 1] and arr[high])\\n return (i + 1)\\n}","IllustrationPartition":"arr[] = {10, 80, 30, 90, 40, 50, 70}\\nIndexes: 0 1 2 3 4 5 6 \\n\\nlow = 0, high = 6, pivot = arr[h] = 70\\nInitialize index of smaller element, i = -1\\n\\nTraverse elements from j = low to high-1\\nj = 0 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])\\ni = 0 \\narr[] = {10, 80, 30, 90, 40, 50, 70} // No change as i and j \\n // are same\\n\\nj = 1 : Since arr[j] > pivot, do nothing\\n// No change in i and arr[]\\n\\nj = 2 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])\\ni = 1\\narr[] = {10, 30, 80, 90, 40, 50, 70} // We swap 80 and 30 \\n\\nj = 3 : Since arr[j] > pivot, do nothing\\n// No change in i and arr[]\\n\\nj = 4 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])\\ni = 2\\narr[] = {10, 30, 40, 90, 80, 50, 70} // 80 and 40 Swapped\\nj = 5 : Since arr[j] <= pivot, do i++ and swap arr[i] with arr[j] \\ni = 3 \\narr[] = {10, 30, 40, 50, 80, 90, 70} // 90 and 50 Swapped \\n\\nWe come out of loop because j is now equal to high-1.\\nFinally we place pivot at correct position by swapping\\narr[i+1] and arr[high] (or pivot) \\narr[] = {10, 30, 40, 50, 70, 90, 80} // 80 and 70 Swapped \\n\\nNow 70 is at its correct place. All elements smaller than\\n70 are before it and all elements greater than 70 are after\\nit."}')},82:function(e){e.exports=JSON.parse('{"cpp":"// C++ program for Merge Sort\\n#include <iostream>\\nusing namespace std;\\n\\n// Merges two subarrays of array[].\\n// First subarray is arr[begin..mid]\\n// Second subarray is arr[mid+1..end]\\nvoid merge(int array[], int const left, int const mid, int const right)\\n{\\n\\tauto const subArrayOne = mid - left + 1;\\n\\tauto const subArrayTwo = right - mid;\\n\\n\\t// Create temp arrays\\n\\tauto *leftArray = new int[subArrayOne],\\n\\t\\t*rightArray = new int[subArrayTwo];\\n\\n\\t// Copy data to temp arrays leftArray[] and rightArray[]\\n\\tfor (auto i = 0; i < subArrayOne; i++)\\n\\t\\tleftArray[i] = array[left + i];\\n\\tfor (auto j = 0; j < subArrayTwo; j++)\\n\\t\\trightArray[j] = array[mid + 1 + j];\\n\\n\\tauto indexOfSubArrayOne = 0, // Initial index of first sub-array\\n\\t\\tindexOfSubArrayTwo = 0; // Initial index of second sub-array\\n\\tint indexOfMergedArray = left; // Initial index of merged array\\n\\n\\t// Merge the temp arrays back into array[left..right]\\n\\twhile (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo) {\\n\\t\\tif (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo]) {\\n\\t\\t\\tarray[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n\\t\\t\\tindexOfSubArrayOne++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tarray[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n\\t\\t\\tindexOfSubArrayTwo++;\\n\\t\\t}\\n\\t\\tindexOfMergedArray++;\\n\\t}\\n\\t// Copy the remaining elements of\\n\\t// left[], if there are any\\n\\twhile (indexOfSubArrayOne < subArrayOne) {\\n\\t\\tarray[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n\\t\\tindexOfSubArrayOne++;\\n\\t\\tindexOfMergedArray++;\\n\\t}\\n\\t// Copy the remaining elements of\\n\\t// right[], if there are any\\n\\twhile (indexOfSubArrayTwo < subArrayTwo) {\\n\\t\\tarray[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n\\t\\tindexOfSubArrayTwo++;\\n\\t\\tindexOfMergedArray++;\\n\\t}\\n}\\n\\n// begin is for left index and end is\\n// right index of the sub-array\\n// of arr to be sorted */\\nvoid mergeSort(int array[], int const begin, int const end)\\n{\\n\\tif (begin >= end)\\n\\t\\treturn; // Returns recursively\\n\\n\\tauto mid = begin + (end - begin) / 2;\\n\\tmergeSort(array, begin, mid);\\n\\tmergeSort(array, mid + 1, end);\\n\\tmerge(array, begin, mid, end);\\n}\\n\\n// UTILITY FUNCTIONS\\n// Function to print an array\\nvoid printArray(int A[], int size)\\n{\\n\\tfor (auto i = 0; i < size; i++)\\n\\t\\tcout << A[i] << \\" \\";\\n}\\n\\n// Driver code\\nint main()\\n{\\n\\tint arr[] = { 12, 11, 13, 5, 6, 7 };\\n\\tauto arr_size = sizeof(arr) / sizeof(arr[0]);\\n\\n\\tcout << \\"Given array is \\\\n\\";\\n\\tprintArray(arr, arr_size);\\n\\n\\tmergeSort(arr, 0, arr_size - 1);\\n\\n\\tcout << \\"\\\\nSorted array is \\\\n\\";\\n\\tprintArray(arr, arr_size);\\n\\treturn 0;\\n}\\n\\n// This code is contributed by Mayank Tyagi\\n// This code was revised by Joshua Estes\\n\\n","Pseudo":"MergeSort(arr[], l,  r)\\nIf r > l\\n     1. Find the middle point to divide the array into two halves:  \\n             middle m = l+ (r-l)/2\\n     2. Call mergeSort for first half:   \\n             Call mergeSort(arr, l, m)\\n     3. Call mergeSort for second half:\\n             Call mergeSort(arr, m+1, r)\\n     4. Merge the two halves sorted in step 2 and 3:\\n             Call merge(arr, l, m, r)"}')},83:function(e){e.exports=JSON.parse('{"cpp":"// C++ program for implementation of selection sort\\n#include <bits/stdc++.h>\\nusing namespace std;\\n\\nvoid swap(int *xp, int *yp)\\n{\\n\\tint temp = *xp;\\n\\t*xp = *yp;\\n\\t*yp = temp;\\n}\\n\\nvoid selectionSort(int arr[], int n)\\n{\\n\\tint i, j, min_idx;\\n\\n\\t// One by one move boundary of unsorted subarray\\n\\tfor (i = 0; i < n-1; i++)\\n\\t{\\n\\t\\t// Find the minimum element in unsorted array\\n\\t\\tmin_idx = i;\\n\\t\\tfor (j = i+1; j < n; j++)\\n\\t\\tif (arr[j] < arr[min_idx])\\n\\t\\t\\tmin_idx = j;\\n\\n\\t\\t// Swap the found minimum element with the first element\\n\\t\\tswap(&arr[min_idx], &arr[i]);\\n\\t}\\n}\\n\\n/* Function to print an array */\\nvoid printArray(int arr[], int size)\\n{\\n\\tint i;\\n\\tfor (i=0; i < size; i++)\\n\\t\\tcout << arr[i] << \\" \\";\\n\\tcout << endl;\\n}\\n\\n// Driver program to test above functions\\nint main()\\n{\\n\\tint arr[] = {64, 25, 12, 22, 11};\\n\\tint n = sizeof(arr)/sizeof(arr[0]);\\n\\tselectionSort(arr, n);\\n\\tcout << \\"Sorted array: \\\\n\\";\\n\\tprintArray(arr, n);\\n\\treturn 0;\\n}\\n\\n","PseudoCode":"arr[] = 64 25 12 22 11\\n\\n// Find the minimum element in arr[0...4]\\n// and place it at beginning\\n11 25 12 22 64\\n\\n// Find the minimum element in arr[1...4]\\n// and place it at beginning of arr[1...4]\\n11 12 25 22 64\\n\\n// Find the minimum element in arr[2...4]\\n// and place it at beginning of arr[2...4]\\n11 12 22 25 64\\n\\n// Find the minimum element in arr[3...4]\\n// and place it at beginning of arr[3...4]\\n11 12 22 25 64 "}')},84:function(e){e.exports=JSON.parse('{"cpp":"// C++ program for implementation of Bubble sort\\n#include <bits/stdc++.h>\\nusing namespace std;\\n\\nvoid swap(int *xp, int *yp)\\n{\\n\\tint temp = *xp;\\n\\t*xp = *yp;\\n\\t*yp = temp;\\n}\\n\\n// A function to implement bubble sort\\nvoid bubbleSort(int arr[], int n)\\n{\\n\\tint i, j;\\n\\tfor (i = 0; i < n-1; i++)\\t\\n\\t\\n\\t// Last i elements are already in place\\n\\tfor (j = 0; j < n-i-1; j++)\\n\\t\\tif (arr[j] > arr[j+1])\\n\\t\\t\\tswap(&arr[j], &arr[j+1]);\\n}\\n\\n/* Function to print an array */\\nvoid printArray(int arr[], int size)\\n{\\n\\tint i;\\n\\tfor (i = 0; i < size; i++)\\n\\t\\tcout << arr[i] << \\" \\";\\n\\tcout << endl;\\n}\\n\\n// Driver code\\nint main()\\n{\\n\\tint arr[] = {64, 34, 25, 12, 22, 11, 90};\\n\\tint n = sizeof(arr)/sizeof(arr[0]);\\n\\tbubbleSort(arr, n);\\n\\tcout<<\\"Sorted array: \\\\n\\";\\n\\tprintArray(arr, n);\\n\\treturn 0;\\n}\\n\\n","cpp-optimized":"// Optimized implementation of Bubble sort\\n#include <bits/stdc++.h>\\nusing namespace std;\\nvoid swap(int *xp, int *yp)\\n{\\n\\tint temp = *xp;\\n\\t*xp = *yp;\\n\\t*yp = temp;\\n}\\n\\n// An optimized version of Bubble Sort\\nvoid bubbleSort(int arr[], int n)\\n{\\nint i, j;\\nbool swapped;\\nfor (i = 0; i < n-1; i++)\\n{\\n\\tswapped = false;\\n\\tfor (j = 0; j < n-i-1; j++)\\n\\t{\\n\\t\\tif (arr[j] > arr[j+1])\\n\\t\\t{\\n\\t\\tswap(&arr[j], &arr[j+1]);\\n\\t\\tswapped = true;\\n\\t\\t}\\n\\t}\\n\\n\\t// IF no two elements were swapped by inner loop, then break\\n\\tif (swapped == false)\\n\\t\\tbreak;\\n}\\n}\\n\\n/* Function to print an array */\\nvoid printArray(int arr[], int size)\\n{\\n\\tint i;\\n\\tfor (i = 0; i < size; i++)\\n\\t\\tcout <<\\" \\"<< arr[i];\\n\\tcout <<\\" n\\";\\n}\\n\\n// Driver program to test above functions\\nint main()\\n{\\n\\tint arr[] = {64, 34, 25, 12, 22, 11, 90};\\n\\tint n = sizeof(arr)/sizeof(arr[0]);\\n\\tbubbleSort(arr, n);\\n\\tcout <<\\"Sorted array: \\\\n\\";\\n\\tprintArray(arr, n);\\n\\treturn 0;\\n}\\n\\n\\n// This code is contributed by shivanisinghss2110\\n"}')}},[[144,1,2]]]);
//# sourceMappingURL=main.7ea76619.chunk.js.map